// Code generated by mockery v2.53.2. DO NOT EDIT.

package user

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	protobuf "github.com/itmrchow/todolist-proto/protobuf"
)

// MockUserServiceClient is an autogenerated mock type for the UserServiceClient type
type MockUserServiceClient struct {
	mock.Mock
}

type MockUserServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserServiceClient) EXPECT() *MockUserServiceClient_Expecter {
	return &MockUserServiceClient_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *LoginRequest, ...grpc.CallOption) (*LoginResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *LoginRequest, ...grpc.CallOption) *LoginResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *LoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserServiceClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - in *LoginRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) Login(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_Login_Call {
	return &MockUserServiceClient_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_Login_Call) Run(run func(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption)) *MockUserServiceClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*LoginRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_Login_Call) Return(_a0 *LoginResponse, _a1 error) *MockUserServiceClient_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_Login_Call) RunAndReturn(run func(context.Context, *LoginRequest, ...grpc.CallOption) (*LoginResponse, error)) *MockUserServiceClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *MockUserServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*protobuf.EmptyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *protobuf.EmptyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterRequest, ...grpc.CallOption) (*protobuf.EmptyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *RegisterRequest, ...grpc.CallOption) *protobuf.EmptyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protobuf.EmptyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *RegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserServiceClient_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserServiceClient_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - in *RegisterRequest
//   - opts ...grpc.CallOption
func (_e *MockUserServiceClient_Expecter) Register(ctx interface{}, in interface{}, opts ...interface{}) *MockUserServiceClient_Register_Call {
	return &MockUserServiceClient_Register_Call{Call: _e.mock.On("Register",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockUserServiceClient_Register_Call) Run(run func(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption)) *MockUserServiceClient_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*RegisterRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockUserServiceClient_Register_Call) Return(_a0 *protobuf.EmptyResponse, _a1 error) *MockUserServiceClient_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserServiceClient_Register_Call) RunAndReturn(run func(context.Context, *RegisterRequest, ...grpc.CallOption) (*protobuf.EmptyResponse, error)) *MockUserServiceClient_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserServiceClient creates a new instance of MockUserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserServiceClient {
	mock := &MockUserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
